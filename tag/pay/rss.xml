<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>airfer.github.io/</title>
   
   <link>http://airfer.github.io/</link>
   <description>There are some things in this world will never change and some things do change,everything that has a beginning has an end </description>
   <language>en-uk</language>
   <managingEditor> Wang Yukun</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>支付网关逻辑之网关交易</title>
	  <link>//pay-part4</link>
	  <author>Wang Yukun</author>
	  <pubDate>2015-10-09T18:19:00+00:00</pubDate>
	  <guid>//pay-part4</guid>
	  <description><![CDATA[
	     <h5>前言</h5>

<p>支付底层服务最难的部分便是根据不同的支付场景进行各种复杂的逻辑记账。不同场景的逻辑记账搞清楚了，那么
整个的底层服务也就清晰明了。这个部分上手也是最难的，常用的方法就是根据底层服务的日志信息进行分析，得到
数据库操作的流程信息，结合这些日志信息以及业务逻辑基础，便可得到支付场景的记账逻辑。</p>

<hr />

<h3 id="section">一、普通的网关交易</h3>
<p>普通的网关交易，在之前也做过简述。其主要包括两个部分，分别为网关交易注册，类似于购物下单以及网关交易更新，对应用户支付完成
后的操作，现就两种进行分析。</p>

<p>1、网关注册</p>

<p><img src="\images\gateway_register.jpg" alt="" title="网关注册图" /></p>

<p>在网关注册服务中会调起两个服务，分别为<em>GatewayService</em>以及<em>TransService</em>：</p>

<p><strong>（1） GatewayService</strong> ：</p>

<ul>
  <li>从数据库表中根据<em>user_id</em>来查询<em>user_id</em>所对应的账户<em>id</em></li>
  <li>查询<em>g_trans_log</em>网关交易流水表，判断此笔订单是否已经进行了注册</li>
  <li>如果此笔订单没有进行注册，则调起<em>TransService</em>进行交易注册</li>
  <li>交易注册完成后，在<em>g_trans_log</em>网关交易流水表中，进行注册</li>
  <li>注册完成后，将结果返回给前端</li>
</ul>

<p><strong>（2） TransService</strong> ：</p>

<ul>
  <li>查询用户账户<em>id</em>以及商户账户<em>id</em>是否可用</li>
  <li>如果两者账户id可用，则在日常交易表<em>t_trans</em>中进行登记</li>
  <li>同时在日常交易流水表<em>t_trans_log</em>中进行登记</li>
  <li>最后在收款单<em>t_receivables</em>中进行注册</li>
</ul>

<p>2、网关更新</p>

<p><img src="\images\gateway_update.jpg" alt="" title="网关更新图" /></p>


	  ]]></description>
	</item>

	<item>
	  <title>支付业务入门及实践</title>
	  <link>//begin-to-know-pay-service</link>
	  <author>Wang Yukun</author>
	  <pubDate>2015-09-15T14:18:00+00:00</pubDate>
	  <guid>//begin-to-know-pay-service</guid>
	  <description><![CDATA[
	     <h4>前言</h4>

<p>对于一些比较复杂的业务，其业务逻辑是十分复杂的。如果只是通过口耳相授，很难将复杂的逻辑讲清楚，也很难在短时间内让新人上手。对于一个团队来说，业务逻辑知识以及测试自动化技术的沉淀显得尤为重要。现在就业务入门及相关指导进行梳理。</p>

<hr />

<h4>一、整个业务指导流程</h4>

<ul>
  <li>业务介绍</li>
  <li>系统架构</li>
  <li>业务线</li>
  <li>流程相关</li>
  <li>人员相关</li>
  <li>工作中需要使用的工具</li>
  <li>权限申请</li>
  <li>测试账号</li>
  <li>其他</li>
  <li>数据库相关系统</li>
  <li>测试上线流程规范</li>
</ul>

<h4>二、详细介绍（360支付平台为例）</h4>

<h5>1、业务介绍</h5>

<p>360支付平台作为360公司支付基础服务部门，为公司提供支付相关服务支持。现在公司支持公司90%的收入性业务，其业务来源主要有三大部分，收入部分可从公司的财报中解读出来。</p>

<ul>
  <li>互联网增值服务部分，包括游戏、彩票、小说等</li>
  <li>广告收入部分，主要为点睛广告平台</li>
  <li>自营业务部分，主要有360理财宝、票据以及手机钱包等</li>
</ul>

<h5>2、系统架构</h5>

<p>系统架构的部分 <br />
<img src="\images\payment_plantform.jpg" alt="" title="平台架构图" /> <br />
平台的架构，主要是按照支付流程进行说明的，支付的逻辑涵盖下单、支付以及支付逻辑的处理。在本文中，并不对所有细节进行阐述</p>

<h5>3、业务线</h5>

<ul>
  <li>内部业务线：主要是给公司内部业务使用，比如彩票、钱包等</li>
  <li>外部业务线：主要是公司以外的公司使用，先阶段还未扩展到外部业务线</li>
</ul>

<h5>4、流程相关</h5>

<ul>
  <li>对于需求变更，测试人员参加需求变更评审</li>
  <li>首先开发人员，根据测试需求，在提测系统中填写提测单，在提测单中写明测试的要点以及测试类别（功能测试、安全测试或者全部）</li>
  <li>根据开发人员的提测要点，编写测试用例，并根据测试需要找开发详细沟通，明确测试要点以及测试范围</li>
  <li>根据测试用例进行测试，及时与开发沟通，并将测试进度在每天的测试日报中及时告知开发，以及测试中所遇到的问题（例如环境、沟通等等）</li>
  <li>测试结束后，发送测试结束报告，并确认上线版本</li>
  <li>如果为APP测试，在版本上线之前需经过APP安全测试，确保版本无安全隐患漏洞，并提交上线申请</li>
  <li>等产品上线后，需要进行线上回归，确保无bug</li>
</ul>

<h5>5、人员相关</h5>

<ul>
  <li>根绝测试的难度以及测试时间，合理的分配人力进行测试。对于较为重要的提测任务，最少需要两个人，进行交叉测试，进一步保证产品质量</li>
  <li>对于固定模块，可安排固定的人员进行测试，也可以确定测试常员，以支持不同业务的紧急需求，具体的人员分配测试根据测试需要灵活制定</li>
</ul>

<h5>6、工作中使用的工具</h5>

<p>现在支付平台主要有三款自动化测试工具，其中两款为自动化接口类工具，一款为单元测试工具</p>

<ul>
  <li>
    <p>支付接口测试工具
<img src="\images\qpay_interface.jpg" alt="" title="平台架构图" /></p>
  </li>
  <li>
    <p>支付底层场景回归工具<br />
<img src="\images\qpay_situation.jpg" alt="" title="平台架构图" /></p>
  </li>
</ul>

<p>插件化设计：</p>

<p><img src="\images\situation_module1.jpg" alt="" title="平台架构图" /></p>

<p>表字段校验规则</p>

<p><img src="\images\situation_module2.jpg" alt="" title="平台架构图" /></p>

<ul>
  <li>基于Gtest的白盒单元测试工具</li>
</ul>

<h5>7、权限申请</h5>

<ul>
  <li>在ops进行相关机器、相关权限的申请</li>
</ul>

<h5>8、测试账号</h5>

<ul>
  <li>可从数据库中自己进行提取，也可以自行构造</li>
</ul>

<h5>9、数据库相关系统</h5>

<ul>
  <li>在第一章 支付网关逻辑之数据库中已经进行了详细的阐述，具体请到相关章节查看</li>
</ul>

<h5>10、测试上线流程规范</h5>

<ul>
  <li>请参照第4部分流程相关</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>支付网关逻辑之特殊场景</title>
	  <link>//pay-part3</link>
	  <author>Wang Yukun</author>
	  <pubDate>2015-08-12T18:19:00+00:00</pubDate>
	  <guid>//pay-part3</guid>
	  <description><![CDATA[
	     <h4>前言</h4>
<p>在支付的过程中，很多时候会有特殊的场景出现，现有的支付系统必须能够做到对支付的异常状况进行处理。
在这篇文章里，将对一些特殊的情况进行说明。</p>

<h3 id="section">一、对账</h3>
<p>对账的目的就是核对账目的准确性，保证出现错误的订单可以在对账的过程中被找到，完成对账的步骤如下：</p>

<ul>
  <li>
    <p>内部对账过程。内部对账其实是一种数据信息收集的过程，如果收集的是付款信息，那么进行的是付款对账；
如果收集的是收款信息，那么进行的就是收款对账；根据信息收集类型的不同，对账也就不同</p>
  </li>
  <li>
    <p>上传文件解析。内部对账结束后，将在数据库中生成内部对账的信息数据表，这些信息存储在数据库中。对账肯定
是两方数据，一方数据为本身支付平台的数据；而另一方则为银行返回的对账文件。在这个阶段需要对银行返回的对账
文件进行解析，并获取到对账所需的相关信息。完成这个过程后，同样在数据库中会生成相关的数据信息。</p>
  </li>
  <li>
    <p>外部对账过程。在收集完内部数据，并完成对银行返回的对账文件的解析后，就具备了外部对账的基础。外部对账
程序将就同一订单号的交易数据在内部对账信息以及银行对账文件信息进行一一比对。所有的订单信息对比完后，对账的
过程也就结束了。</p>
  </li>
  <li>
    <p>对账结果说明。对账完成后，对账结果正确的数据放入对平表中，而对账失败的数据则放入对差表中。当对差表中有数据时
可能需要根据情况再行处理。</p>
  </li>
</ul>

<h3 id="section-1">二、掉单</h3>
<p>交易掉单实质是在银行与支付平台之间出现数据不同步。</p>

<p>掉单的场景发生如下：客户银行卡中的钱已经被扣除，但是银行或者第三方支付机构返回信息给我们说，此笔付款没有成功。由于客户在平台的订单为未支付，所以此时需要补单的操作。</p>

<ul>
  <li>补单操作实际上是一个加款的动作</li>
  <li>实际场景中，发生补单并不是十分多见</li>
</ul>

<h3 id="section-2">三、退票</h3>
<p>退票的场景是多数发生在用户提现的情形下，当然也会发生在向用户付款的其他情形。用户提现时，用户的银行卡信息不对，或者
是向用户退款时，用户的银行卡不可用，这个场景下就需要退票。</p>

<ul>
  <li>退票场景出现在，商户钱已被扣除，但是向用户支付时出现错误的场景</li>
  <li>已有场景包括提现、退款、基金赎回等场景</li>
</ul>

<hr />

<h3 id="section-3">三、总结</h3>

<p>本章对支付系统的中对账以及掉单、退票进行了阐述，具体测试操作还要根据实际情况而定。</p>

	  ]]></description>
	</item>

	<item>
	  <title>支付网关之场景支付</title>
	  <link>//pay-part2</link>
	  <author>Wang Yukun</author>
	  <pubDate>2015-08-10T20:19:00+00:00</pubDate>
	  <guid>//pay-part2</guid>
	  <description><![CDATA[
	     <h4>前言</h4>
<p>在了解基本的支付网关逻辑数据库的设计原理之后，就可将所学到的知识用于实际的场景支付测试中
不同的支付场景，支付的逻辑也迥然不同。常见的场景支付有普通的网关交易，如用户在线购物；还有如
商户现金红包派发、优惠券组合支付、个人钱包充值消费退回、优惠券派发等等。不同的支付场景下理解支付的
业务逻辑最为关键，只有理解了业务逻辑，才能更好的明白测试的点在什么地方。</p>

<hr />

<p>下面就以普通的网关交易为例子来阐述整个支付逻辑的过程：</p>

<h3 id="section">一、支付逻辑框架图</h3>

<p><img src="\images\pay1.png" alt="" title="支付逻辑框架图" /></p>

<p>上述图可以很好的将支付从前端到后端的逻辑表述清楚，从图中可以看出整个支付逻辑可以分成三块
用户、商户、支付网关。每个部分都有自己独立的逻辑结构，现就逻辑结构进行分析：</p>

<ul>
  <li>
    <p>用户商户之间：用户在选购完商品，然后在商户服务器生成相关的订单，点击“去支付”后，会跳转到
支付网关的相关相关页面，在这个页面中用户可以选择相关的银行，或者是第三方支付比如支付宝。</p>
  </li>
  <li>
    <p>商户与支付网关之间：用户在支付网关完成相关支付，在支付完成后会跳转到商户定义的某个页面（支付
成功或者支付失败的返回页面会不同）。与此同时支付网关服务器会通知商户服务器，这笔订单是否成功，商户
服务器在收到确认通知后，会向支付网关服务器发送一个确认报文，确认收到通知信息。</p>
  </li>
  <li>
    <p><strong>说明</strong>：不同的网关支付，其实现方案也是有所差别，有的网关服务器并非在支付完成后向商户服务器发送报文，而是
需要商户服务器主动发送报文请求进行询问，类似于Tcp/Ip协议的三次握手。</p>
  </li>
  <li>
    <p>商户与用户之间：商户与用户之间的信息交互是将银行返回的支付结果以一种更加人性化的方式给用户呈现，
支付成功的话，可能会有链接可以使用户点击跳转查看订单详情。如果失败则可能会给用户提示此次支付失败的原因。</p>
  </li>
</ul>

<h3 id="section-1">二、支付网关注册逻辑图</h3>
<p><img src="\images\gatewayRegister.jpg" alt="" title="网关交易注册" /></p>

<p>网关交易注册描述的是在支付进行时，支付网关前端与支付网关后台交互的场景。商户服务器将订单的相关信息包括订单号、支付金额等信息发送到支付网关前端，支付网关前端服务器抽取这些信息，并将这些信息组合成交易注册报文发送给网关支付后台服务器。网关支付后台服务器接收到注册报文后将做以下操作：</p>

<ul>
  <li>
    <p>首先是支付网关服务<em>GatewayServer</em>接收报文请求信息，并完成分发。</p>
  </li>
  <li>
    <p>如果判断判断这是一笔交易，将会调用<em>TransServer</em>服务。<em>TtransSer</em>服务将完成一系列数据表的记账操作。</p>
  </li>
  <li>
    <p>最后<em>TransServer</em>服务完成后将重新回到网关<em>GatewayServer</em>服务处，并完成核心网关的记账操作，最终记账完成。</p>
  </li>
</ul>

<h3 id="section-2">三、支付网关更新逻辑图</h3>
<p><img src="\images\gatewayUpdate.jpg" alt="" title="网关交易更新" /></p>

<p><em>网关交易更新</em>描述的在支付完成后，支付网关前端与支付网关服务器交互的场景。支付网关前端在获知银行返回的支付
结果后，将银行返回的信息包括支付的单号、成功后的银行返回单号等，组成更新报文并将报文发送到支付网关后台
服务器。支付网关后台服务器在完成一系列的记账操作后结束此次交易。网关注册与网关更新有一些区别：</p>

<ul>
  <li>
    <p>信息的来源不同。注册信息来源于商户服务器发送的信息，而更新来源于银行返回的信息。</p>
  </li>
  <li>
    <p>数据表的更新不同。以网关交易为例，注册的时候并不涉及到账户资金的变动，也就是说tAccounts表中的数据
并不会发生变化，但是在网关交易更新时，会根据银行返回的结果来变更账户的余额信息。</p>
  </li>
  <li>
    <p>需要注意的时，每次对交易表、收款表、账户表进行变动的时候都会产生相关的流水变化，便于查账。</p>
  </li>
</ul>

<hr />

<h3 id="section-3">四、总结</h3>

<p>本章以网关交易注册更新为例，对一般情形下的支付流程进行了简要的总结，在最后一章中将对支付中的一些概念进行整理。</p>

	  ]]></description>
	</item>

	<item>
	  <title>支付网关数据库设计之道</title>
	  <link>//pay-part1</link>
	  <author>Wang Yukun</author>
	  <pubDate>2015-08-07T19:19:00+00:00</pubDate>
	  <guid>//pay-part1</guid>
	  <description><![CDATA[
	     <h4>前言</h4>
<p>在支付业务组已经有很长的时间了，现在可以抽时间将所做的业务逻辑进行梳理一下，也算是总结吧。
接触支付业务以来，感觉支付业务的逻辑很是复杂，上手的时间很慢，现在有一年的时间了，我也不敢说
我对支付业务完全了解了，现就我所知道的部分做个总结吧，本次支付逻辑共有三章内容。</p>

<hr />
<p>###一、数据表
数据库中的数据表是整个核心逻辑的载体说在，所有的记账逻辑、以及与支付前台交互的数据都是在这里
进行记录。现就主要的表进行简要说明。不同的第三方支付其数据表名称肯定也不同，这里的表名称仅作参考</p>

<ul>
  <li><strong><em>gTransLog表</em></strong>： 支付网关交易流水表，所有通过网关的交易全部都会在此表中写入数据。</li>
  <li><strong><em>tAccounts表</em></strong>： 用户的账户数据记录表，在第三方系统中其记录着用户的账上资金。</li>
  <li><strong><em>tAccountLog表</em></strong>： 用于记录账户的自己流水情况，所有对tAccounts表的资金变动都会在流水表中进行记录</li>
  <li><strong><em>tBankPaymentInfo表</em></strong>： 上传对账文件后，解析对账文件生成的表</li>
  <li><strong><em>tBankcardInfo表</em></strong>： 用于存储用户或者商户所绑定银行卡的信息，包括银行名称、卡号等</li>
  <li><strong><em>tChannelConfig表</em></strong>： 渠道配置表，用于配置商户与不同渠道的对应关系，比如接入支付宝或者招商银行</li>
  <li><strong><em>tFreeze表</em></strong>： 冻结表，当tAccounts表中的资金有事先冻结的情况下，比如说基金赎回等会向tFreezes表中插入数据</li>
  <li><strong><em>tPayments表</em></strong>： 付款表，记录账户付款相关信息</li>
  <li><strong><em>tReceivables表</em></strong>： 收款表，记录收款信息</li>
  <li><strong><em>tPaymentChannel表</em></strong>:  商户付款渠道的相关信息</li>
  <li><strong><em>tRefundChannel表</em></strong>： 商户退款屠刀的相关信息</li>
  <li><strong><em>tRollLog表</em></strong>： 业务流水表</li>
  <li><strong><em>tTrans表</em></strong>:  交易表,只要是交易，资金有变化，是商户与用户交互的过程</li>
  <li><strong><em>tTransLog表</em></strong>： 交易流水表，记录交易流水的相关信息</li>
  <li><strong><em>tTransCashBack</em></strong>： 记录银行账号退款的相关信息</li>
  <li><strong><em>tBankPayReconFile表</em></strong>：上传对账文件后，解析对账文件生成的表</li>
  <li><strong><em>tReconcilationPaySucc表</em></strong>：对账成功后写入的表</li>
  <li><strong><em>tReconcilationPayFail表</em></strong>：对账失败后写入的表</li>
  <li><strong><em>tAccountSystemayPaymentInfo表</em></strong>：付款内部数据收集表</li>
</ul>

<h3 id="section">二、数据表分析</h3>
<p>在第一部分对其中后台记账系统的数据表中大致进行了一下说明，但是其中也会有一些需要注意的点，
这才测试中分出关键。现在就每一个表进行详细的分析一下。</p>

<p>1、<strong><em>gTransLog表</em></strong>：该表是所有网关交易都要登记的表，从支付前台传入的数据首先经过<em>gTransLog</em>表进行
网关登记和注册，然后再进行其他记账。在表中有内部交易单号，用于查取交易数据；有<em>returnCode</em>用户存放银行返回
的数据；有状态标志用于查询交易的最终状态。很多时候，支付前端的请求都是直接查取网关表来进行某些交易逻辑判断。</p>

<p>2、<strong><em>tAccounts表</em></strong>：该表是账户数据记录表，记录着用户账上的资金。可以联系一下支付宝，就相当于个人的支付宝账户
里面的余额。不同的记账系统对账户的区分也不一样，可能有的账户系统中只用商户账户存在，有的则允许个人和商户都存在。该
表中的账户除了较为重要的<em>Balance Amount</em>外，还有几点需要注意：</p>

<ul>
  <li>账户的冻结金额</li>
  <li>账户的子类型，有些时候需要关注是主账户还是次级账户</li>
  <li>账户的科目类型，是资产账户还是负债账户，这在记录账户流水的时候很有用</li>
  <li>账户的状态，可用还是失效</li>
</ul>

<p>3、<strong><em>tAccountLog表</em></strong>: 该表是用来记录资金账户流水变化，并记录相关交易单号以及金额。在表中会有标志记录这次的资金流动情况
是借记还是贷记，这在核对账户的资金流动上很重要，难免出错。</p>

<p>4、<strong><em>tBankPaymentInfo表</em></strong>：这个表在对账的时候使用，关于对账相关逻辑在下一章情景支付中进行讲述。这个表是付款对账表，当然与之
相对的是收款对账表，在此仅以付款对账表进行讲述。将对账文件进行解析，获取文件中数据，来成生成此表。将在外部对账时使用。</p>

<p>5、<strong><em>tChannelConfig表</em></strong>：该表是渠道配置表，主要是商户使用。该表中配置了商户以及此商户所接入的渠道，比如支付宝或者某银行。可以
从现实生活中去理解此逻辑，在某商户进行购物时并不是每一个商户都对某家银行支持，说的也是这个道理。</p>

<p>6、<strong><em>tFreezes表</em></strong>：该表为冻结表，当有交易发生资金冻结的情况时，都会向这个表中写入数据；而当这个某些资金解冻后，也将该冻结表中的
状态改为解冻。并不是所有的交易在金额变动之前都会去事先冻结金额，对于实时性交易来说，账户的钱是会被实时扣除。账户资金出现冻结的情况
出现在基金申购、优惠券消费等为数不多的场景中。</p>

<p>7、<strong><em>tPayments表</em></strong>: 该表为付款表，这里的付款是从商户的角度来说的，对于用户来说就是收款。初次涉及账户逻辑时很容易将这逻辑搞混，这个表使用
再向用户打钱的时候才会被用到。比如在基金赎回的场景中，就会向这个表中插入数据，通过表中的状态，就可以判断其向用户打钱有没有成功，对于没有成功、
的情形又会涉及到退票的情形，这在下一章讨论。</p>

<p>8、<strong><em>tReceivables表</em></strong>: 该表为收款表。这里的收款也是对商户而言，对用户而言则是付款。比如用户在进行购物的时候，用户是付款，商户是收款，那么此时
就会向此表中插入数据，其表中也存有<em>state</em>字段用来表示用户付款有没有成功。只要是涉及用户的资金进入第三方系统，此表都会有收款数据写入。</p>

<p>9、<strong><em>tPaymentChannel表</em></strong>:此表为付款渠道表，如果从字面意思进行理解便可知道，这个是付款时的渠道。不管是商户还是用户其相关的付款渠道信息都是在此
配置，如果在这个表中将渠道置为无效，则在支付前端看不到此渠道。</p>

<p>10、<strong><em>tRefundChannel表</em></strong>：此表是退款渠道配置表，可以类比付款渠道配置表进行理解。</p>

<p>11、<strong><em>tTrans表</em></strong>：该表是交易表，核心点在与交易，交易必须有买和卖，只有这样才能完成交易。此时就涉及一个易被忽视的问题，比如向用户向自己钱包充值，
这个阶段只是收钱，并没有存在交易，所以在这个场景下并不会向该表中写入数据。在一般的交易中，可查看表中的状态来判断此交易的状态，是等待付款、付款完成
、付款失败、已清算。支付前端也时刻通过这个表来进行其他联接查询操作。</p>

<p>12、<strong><em>tTransLog表</em></strong>：该表为交易流水表，对tTans表的变化都会在<em>tTransLog</em>中进行记录，这在后续查询交易异常情况下，比较有帮助作用</p>

<p>13、<strong><em>tTransCashBack表</em></strong>：该表为现金退款表，当用户通过银行卡支付并成功扣款后，这个时候如果发起退款那么要这个表中插入数据。有一个情况要注意，这个表中的
数据只涉及银行退款，比如在组合消费的时候，可能有优惠券的金额。那么由于优惠券过期而发生退款时，银行卡退款部分写入<em>tTransCashBack</em>表中。</p>

<p>14、<strong><em>tBankPayReconFile表</em></strong>：这个表中的数据为解析银行付款对账文件而来，其数据来源于银行。这个数据表为付款文件对账表，与之相对的是收款银行文件对账表，虽然
在这里没有将其列出，但是其业务逻辑思想是相通的。</p>

<p>15、<strong><em>tReconcilationPaySucc表</em></strong>：对账数据的结果存放处，对账的结果又对平和对差的区别。具体在这里不做讲解，对平的数据放入此表中，而对差的数据放入<em>Fail</em>表中。</p>

<p>16、<strong><em>tAccountSystemayPaymentInfo</em></strong>：这个表为付款信息收集表，也是内部对账后的结果表。与之相对的是收款信息收集表。</p>

<hr />

<h3 id="section-1">三、总结</h3>

<p>本章就支付网关系统进行了粗略的介绍，对所设计的表以及表的功能进行了简述，在理解各数据表的基本功能后，其理解各业务场景也就变的相对容易了。</p>

	  ]]></description>
	</item>


</channel>
</rss>
